package re.legend.crowd_simulator.time

import java.io.Serializable
import com.google.common.base.Objects
import java.util.concurrent.TimeUnit

/**
 * Track the time
 */
class TimePercept extends AbstractTime implements Serializable, Cloneable {
	val currentTime : float
	val stepDuration : float

	new (currentTime : float, stepDuration : float) {
		this.currentTime = currentTime
		this.stepDuration = stepDuration
	}

	def getCurrentTime(unit : TimeUnit = null) : float {
		this.currentTime.secondsToUnits(unit)
	}

	def getLastStepDuration(unit : TimeUnit = null) : float {
		this.stepDuration.secondsToUnits(unit)
	}

	override clone : TimePercept {
		super.clone as TimePercept
	}

	override equals(obj : Object) : boolean {
		if (obj instanceof Time) {
			this.currentTime == obj.currentTime
		} else {
			false
		}
	}

	override hashCode : int {
		Objects::hashCode(this.currentTime)
	}

	override toString : String {
		Float::toString(this.currentTime)
	}
}
