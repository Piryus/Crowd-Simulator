package re.legend.crowd_simulator.agents.spawner

import com.badlogic.gdx.math.Vector2
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Schedules
import re.legend.crowd_simulator.agents.adult.AdultAgent
import re.legend.crowd_simulator.entities.bodies.AdultBody
import re.legend.crowd_simulator.map.Map

agent SpawnerAgent {
	uses Lifecycle, DefaultContextInteractions, Schedules

	// Type of agent to spawn
	var agentType : String

	// Frequency at which the agents have to spawn (in milliseconds)
	var frequency : int

	// The map on which the agents will be spawned
	var map : Map

	// The total number of agents to spawn
	var numberOfAgents : int

	// Number of agents spawned so far
	var numberOfAgentsSpawned : int

	// The agents' spawn position
	var position : Vector2

	on Initialize {
		this.agentType = occurrence.parameters.get(0) as String
		this.numberOfAgents = occurrence.parameters.get(1) as Integer
		this.frequency = occurrence.parameters.get(2) as Integer
		this.position = occurrence.parameters.get(3) as Vector2
		this.map = occurrence.parameters.get(4) as Map

		this.numberOfAgentsSpawned = 0

		// Spawn the given number of agents at the given frequency
		every(this.frequency)[spawn]
	}

	/** 
	 * Spawn an agent with the spawner's parameters
	 */
	def spawn() {
		synchronized (this.map.bodies) {
			if (this.numberOfAgentsSpawned < this.numberOfAgents) {
				var adultBody = this.map.createBody(typeof(AdultBody), null, this.position.x, this.position.y)
				spawnInContextWithID(typeof(AdultAgent), adultBody.getUuid, defaultContext)
				this.numberOfAgentsSpawned++;
			}
		}
	}
}
