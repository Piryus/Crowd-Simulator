/** 
 * 
 */
package re.legend.crowd_simulator.agents.spawner

import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import io.sarl.core.Lifecycle
import re.legend.crowd_simulator.agents.environment.MapManager
import re.legend.crowd_simulator.agents.adult.AdultAgent
import io.sarl.core.DefaultContextInteractions
import re.legend.crowd_simulator.agents.events.GameLoopTest
import com.badlogic.gdx.math.Vector2
import re.legend.crowd_simulator.map.Map
import re.legend.crowd_simulator.entities.bodies.AgentBody
import re.legend.crowd_simulator.entities.bodies.AdultBody

/** 
 * @author Andre
 * 
 */
agent SpawnerAgent {
	uses Lifecycle, DefaultContextInteractions
	
	
	//Agent to pop
	var agentHumanoid : AgentBody

	// Time management for spawner
	var lastTimeSpawner : long
	var frequency : long
	
	//
	var map : Map
	var numberOfAgent : int
	var position : Vector2


	on Initialize {
		this.lastTimeSpawner = System.currentTimeMillis
		
		
		this.agentHumanoid = occurrence.parameters.get(0) as AgentBody // Type of agent to pop
		this.numberOfAgent = occurrence.parameters.get(1) as Integer //Number of agents to pop
		this.frequency = occurrence.parameters.get(2) as Long //Frequency of popping agents
		this.position = occurrence.parameters.get(3) as Vector2 //position of the spawn
		this.map = occurrence.parameters.get(4) as Map
		spawnerMethod
	}

	on Destroy {
	}
	
	/*
	 * Adult Spawner
	 */
	def spawnerMethod() {
		for (var i = 0; i<this.numberOfAgent; i++)
		{
			var adultBody = this.map.createBody(typeof(AgentBody), null, position.x, position.y)
			spawnInContextWithID(typeof(AdultAgent), adultBody.getUuid, defaultContext)
			Thread.sleep(50)
		}
	}
}

