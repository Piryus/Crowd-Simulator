package re.legend.crowd_simulator.agents

import re.legend.crowd_simulator.bodies.AdultBody
import re.legend.crowd_simulator.bodies.Map
import java.util.List
import re.legend.crowd_simulator.bodies.AgentBody
import java.util.ArrayList
import java.util.Random
import re.legend.crowd_simulator.bodies.KidBody
import re.legend.crowd_simulator.bodies.DogBody
import re.legend.crowd_simulator.bodies.Wall

/**
 * Capacity to manage the map
 */
capacity MapManager {
	/**
	 * Create an adult body
	 */
	 def createAdult() : AdultBody
	 
	 /**
	  * Create a kid body
	  */
	 def createKid() : KidBody
	 
	 /**
	  * Create a dog body
	  */
	 def createDog : DogBody
	 
	 /**
	  * Return a list containing the bodies on the map
	  */
	 def getBodies() : List<AgentBody>
	 
	 /**
	  * Set up the walls in the map object
	  */
	 def setupWalls(walls : List<Wall>)
	 
	 // TODO Test purpose
	 def randomMoveJohn()
}

skill DefaultMapManager implements MapManager {
	
	var map : Map
	
	def install {
		this.map = new Map()
	}
	
	def createAdult : AdultBody {
		this.map.createBody(typeof(AdultBody), null);
	}

	def createKid : KidBody {
		this.map.createBody(typeof(KidBody), null);
	}

	def createDog : DogBody {
		this.map.createBody(typeof(DogBody), null);
	}

	def getBodies() : List<AgentBody> {
		new ArrayList<AgentBody>(this.map.getBodies)
	}
	
	def randomMoveJohn() {
		var rand = new Random
		var dir : int
		if (rand.nextBoolean)
			dir = 1
		else
			dir = -1
		var dir2 : int
		if (rand.nextBoolean)
			dir2 = 1
		else
			dir2 = -1
		for (b : this.map.getBodies) {
			if (b.getPosition.x + dir > 560 || b.getPosition.x + dir < 0)
				dir = - dir
			if (b.getPosition.y + dir2 > 560 || b.getPosition.y + dir2 < 0)
				dir2 = -dir2
			b.setPosition(b.getPosition.x + dir, b.getPosition.y + dir2)
		}
	}
	
	def setupWalls(walls : List<Wall>) {
		map.setWalls(walls);
	}
	
}