package re.legend.crowd_simulator.agents

import com.badlogic.gdx.backends.lwjgl.LwjglApplication
import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import re.legend.crowd_simulator.graphics.SimulationApplication

/** 
 * This agent is the environment, use Observer Pattern and link with LibGDX
 * The environment will spawn "agent spirit" for people, their body, and match them
 */
agent Environment {
	
	uses Logging, Lifecycle, DefaultContextInteractions, MapManager
	
	var application : SimulationApplication
	
	on Initialize {
		loggingName = "Environment"
		
		info("Environment initialized, creating the world...")

		// TODO TEST ADULT CREATION
		setSkill(new DefaultMapManager)
		var adultTest = createAdult
		spawnInContextWithID(typeof(AdultAgent), adultTest.getUuid, defaultContext)
		
		// Instantiates application
		var config = occurrence.parameters.get(0) as LwjglApplicationConfiguration
		this.application = new SimulationApplication()
		new LwjglApplication(this.application, config);
		// Wait 5 secs to let the application load the graphics
		Thread::sleep(5000);
		// Retrieves the walls from the tiled map and set them up into the map object
		setupWalls(this.application.getWalls);
		
		// TODO Implement a real game loop
		emit(new GameLoopTest)
	}

	on GameLoopTest {
		computePerceptions
		//randomMoveJohn
		Thread::sleep(30);
		this.application.update(getBodies);
		emit(new GameLoopTest);
		
	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("The World was destroyed.")
	}
	
	def notifyAgents {
		// Manage time first, we coudl create a structure here or something like this holding the time infos
//		val timePercept = new TimePercept(this.environment.timeManager.currentTime, this.environment.timeManager.lastStepDuration)
		// Create and send the perception event to every bodies
//		for (body : getBodies) {
			// Create the perception
//			var ^event = new PerceptionEvent(body.perceivedObjects, new Percept(body), timePercept)
//			^event.source = defaultSpace.getAddress(ID)
			// Emit the perception
//			getDefaultSpace.emit(^event)[it.UUID == body.id]
//		}
	}

}

