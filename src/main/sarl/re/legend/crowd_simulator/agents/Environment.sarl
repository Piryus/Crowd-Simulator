package re.legend.crowd_simulator.agents

import com.badlogic.gdx.backends.lwjgl.LwjglApplication
import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration
import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import io.sarl.core.Lifecycle
import io.sarl.core.DefaultContextInteractions
import re.legend.crowd_simulator.SimulationApplication

event WorldCreation

/** 
 * This agent is the environment, use Observer Pattern and link with LibGDX
 * The environment will spawn "agent spirit" for people, their body, and match them
 */
agent Environment {
	
	uses Logging, Lifecycle, DefaultContextInteractions
	
	var application : LwjglApplication

	on Initialize {
		loggingName = "map"
		info("Hello, I am the environment and I am creating this world")
		
		var config = occurrence.parameters.get(0) as LwjglApplicationConfiguration
		
		// Instantiates application
		this.application = new LwjglApplication(new SimulationApplication(), config)
		
		var adult = AdultAgent.spawn()
		var kid = KidAgent.spawn

		/* IMPORTANT: Teacher gave us the winning trio
		 * var body = new Body()
		 * map.add(body) //add the body in the universe
		 * 
		 * var adult = AdultAgent.spawnInContextWithID(body.getUUID, defaultContext, body) 
		 * //create spirit
		 * //getUUID, the ID of the spirit and the agent have to match
		 */
		
		emit(new WorldCreation, [elt|elt.UUID == adult])
		emit(new WorldCreation, [elt|elt.UUID == kid])

		killMe();
	}

	on WorldCreation
	{
		info("hello everyone")
	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("The World was destroyed.")
	}

	on AgentSpawned {
		// A new agent has been spawned in our context.
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}
}
