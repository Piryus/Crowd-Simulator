package re.legend.crowd_simulator.agents.adult

import com.badlogic.gdx.math.Vector2
import com.google.common.graph.MutableGraph
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Lifecycle
import java.util.List
import java.util.Random
import re.legend.crowd_simulator.agents.events.AgentLeftMall
import re.legend.crowd_simulator.agents.events.Alarm
import re.legend.crowd_simulator.agents.events.Perception
import re.legend.crowd_simulator.behaviors.AdultState
import re.legend.crowd_simulator.entities.bodies.AdultBody
import re.legend.crowd_simulator.entities.bodies.Sex
import re.legend.crowd_simulator.entities.gameobjects.Shop
import re.legend.crowd_simulator.pathfinding.AStarNode

/** 
 * Defines an adult's behavior
 */
behavior AdultBehavior {
	uses AdultCapacity, Lifecycle, DefaultContextInteractions

	var body : AdultBody
	var rand = new Random
	var state = AdultState::WAITING
	var waypoints : MutableGraph<AStarNode>
	var exits : List<Vector2>

	/**
	 * On reception of a Perception event and when the agent is in the WAITING state
	 * The agent should select a shop to go
	 */
	on Perception [state == AdultState::WAITING] {
		var shops = occurrence.shops
		body = occurrence.body as AdultBody
		waypoints = occurrence.waypoints 
		
		
		// Select a shop from the list randomly
		var randomShop : Shop
		var randChance = rand.nextInt(10)
		if ((body as AdultBody).sex  == Sex.male) { // Male agent
			if (randChance > 7) { // 20% chance the agent will choose a female shop
				do {
					randomShop = shops.get(rand.nextInt(shops.size))
				} while (!randomShop.id.contains("F"))
			} else { // 80% chance the agent will choose a male shop
				do {
					randomShop = shops.get(rand.nextInt(shops.size))
				} while (!randomShop.id.contains("M"))
			}
		} else if ((body as AdultBody).sex == Sex.female) { // Female agent
			if (randChance > 7) { // 20% chance the agent will choose a male shop
				do {
					randomShop = shops.get(rand.nextInt(shops.size))
				} while (!randomShop.id.contains("M"))
			} else { // 80% chance the agent will choose a female shop
				do {
					randomShop = shops.get(rand.nextInt(shops.size))
				} while (!randomShop.id.contains("F"))
			}
		}

		
		// Sets the shop targeted by the agent
		body.setVisitedShop(randomShop);

		// Selects an entrance randomly
		var entrances = randomShop.getEntrances
		body.shopEntrance = entrances.get(rand.nextInt(entrances.size))
		body.target = body.shopEntrance
		
		moveAlongPath(body, occurrence.waypoints)
		
		state = AdultState::WALKING_TO_SHOP;
	}

	on Perception [state == AdultState::WALKING_TO_SHOP] {
		var body = occurrence.body
		
		if (body.hasReachedShopEntrance) {
			// Changes state to shopping
			state = AdultState::SHOPPING;
			
			// Sets the time at which the agent started shopping
			body.shoppingStartedTime = System.currentTimeMillis
			
			// Sets a random target in the shop
			var randTargetInShop : Vector2
			do {
				// Gets random X and Y within a rectangle representing the area of the shop
				var randTargetX = rand.nextInt(body.visitedShop.area.boundingRectangle.width as int)
				var randTargetY = rand.nextInt(body.visitedShop.area.boundingRectangle.height as int)
				randTargetInShop = new Vector2(randTargetX, randTargetY)
				randTargetInShop.add(body.visitedShop.area.boundingRectangle.x,
					body.visitedShop.area.boundingRectangle.y)
			} while (!body.visitedShop.area.contains(randTargetInShop))
			// Updates time at which the target was acquired
			body.shopTargetAcquiredTime = System.currentTimeMillis
			// Sets the body target
			body.target = randTargetInShop
			
		} else if (body.path != null && body.path.nodes.size > 0 && body.hasReachedPathLastNode) {
			// Move to the entrance of the shop
			body.target = body.shopEntrance
			moveStraight(body)
		} else {
			// Move along the path created to go to the shop
			moveAlongPath(body, occurrence.waypoints)
		}
	}

	on Perception [state == AdultState::SHOPPING] {
		var body = occurrence.body

		// If the agent has been shopping for longer than a minute, get it to the entrance of the shop
		if (System.currentTimeMillis > body.shoppingStartedTime + 60000) {
			// Sets the agent's target to the shop entrance
			body.target = body.shopEntrance
			// If the agent has reached the shop entrance, loop to the waiting state
			if (body.hasReachedShopEntrance) {
				this.body.path = null
				state = AdultState::WAITING
			}
		}
		
		// If the body has had its target for longer than 10 seconds, give it a new one
		else if (System.currentTimeMillis > body.shopTargetAcquiredTime + 10000) {
			// Sets a random target in the shop
			var randTargetInShop : Vector2
			do {
				// Gets random X and Y within a rectangle representing the area of the shop
				var randTargetX = rand.nextInt(body.visitedShop.area.boundingRectangle.width as int)
				var randTargetY = rand.nextInt(body.visitedShop.area.boundingRectangle.height as int)
				randTargetInShop = new Vector2(randTargetX, randTargetY)
				randTargetInShop.add(body.visitedShop.area.boundingRectangle.x,
					body.visitedShop.area.boundingRectangle.y)
			} while (!body.visitedShop.area.contains(randTargetInShop))
			// Updates time at which the target was acquired
			body.shopTargetAcquiredTime = System.currentTimeMillis
			// Sets the body target
			body.target = randTargetInShop
		}
		
		// Moves straight to the target
		moveStraight(occurrence.body)
	}
	
	/**
	 * Received when the bomb has been planted
	 */
	on Alarm {
		// Retrieves the exits list
		exits = occurrence.exits
		
		// If the agent is not in a shop yet, make him head to the nearest exit using path finding
		if (state == AdultState::WALKING_TO_SHOP || state == AdultState::WAITING) {
			// Finds nearest exit
			var nearestExit = exits.get(0)
			var distNearestExit = Vector2::dst(nearestExit.x, nearestExit.y, body.position.x, body.position.y)
			for (exit : exits) {
				var distExit = Vector2::dst(exit.x, exit.y, body.position.x, body.position.y)
				if (distExit < distNearestExit) {
					nearestExit = exit
					distNearestExit = Vector2::dst(nearestExit.x, nearestExit.y, body.position.x, body.position.y)
				}
			}
			
			// Sets the agent's target to the nearest exit
			body.target = nearestExit
			body.nearestExit = nearestExit
			// Move along the path created to go to the shop
			body.path = null
			//moveAlongPath(body, waypoints)
			// Changes the agent state to evacuating
			state = AdultState::EVACUATING
		} else if (state == AdultState::SHOPPING) {
			// Sets the agent's target to the nearest exit
			body.target = body.shopEntrance
			// Changes the agent state to evacuating
			state = AdultState::EVACUATING_SHOP
			// Move straight to the entrance of the shop
			//moveStraight(body)
		}
	}

	on Perception [state == AdultState::EVACUATING] {
		if (body.hasReachedNearestExit) {
			// Warns the environment that an agent has left the mall in order to delete its body
			emit(new AgentLeftMall(ID))
			// Kills the agent's mind
			killMe
		} else if (body.path != null && body.path.nodes.size > 0 && body.hasReachedPathLastNode) {
			// Move to the nearest exit
			body.target = body.nearestExit
			moveStraight(body)
		} else {
			// Use path finding to approach the exit
			moveAlongPath(body, occurrence.waypoints)
		}
	}

	on Perception [state == AdultState::EVACUATING_SHOP] {
		if (body.hasReachedShopEntrance) {
			// Finds nearest exit
			var nearestExit = exits.get(0)
			var distNearestExit = Vector2::dst(nearestExit.x, nearestExit.y, body.position.x, body.position.y)
			for (exit : exits) {
				var distExit = Vector2::dst(exit.x, exit.y, body.position.x, body.position.y)
				if (distExit < distNearestExit) {
					nearestExit = exit
					distNearestExit = Vector2::dst(nearestExit.x, nearestExit.y, body.position.x, body.position.y)
				}
			}

			// Sets the agent's target to the nearest exit
			body.target = nearestExit
			body.nearestExit = nearestExit
			// Move along the path created to go to the shop
			body.path = null
			moveAlongPath(body, waypoints)
			// Changes the agent state to evacuating
			state = AdultState::EVACUATING
		} else {
			// Moves straight to the entrance of the shop
			moveStraight(body)
		}
	}

}
