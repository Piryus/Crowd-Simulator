package re.legend.crowd_simulator.agents.adult

import com.badlogic.gdx.math.Vector2
import java.util.Random
import re.legend.crowd_simulator.behaviors.AdultState
import re.legend.crowd_simulator.entities.bodies.AdultBody
import re.legend.crowd_simulator.entities.bodies.AgentBody
import re.legend.crowd_simulator.influence.MotionInfluence
import re.legend.crowd_simulator.pathfinding.Path
import java.util.List

skill AdultSkill implements AdultCapacity {

	// Body on which the actions will be applied
	var body : AdultBody

	// Last step time
	var lastStepTime : long

	// Time at which the agent has acquired its target, used for random moves
	var targetAcquiredTime : long
	
	// Current path followed by the agent
	var path : Path
	
	// The current node the agent is targeting
	var currentNode : int

	def install() {
		this.lastStepTime = System.currentTimeMillis
		this.targetAcquiredTime = System.currentTimeMillis - 20000
	}

	def shop(position : Vector2) {
		throw new UnsupportedOperationException("TODO: auto-generated method stub")
	}

	def move(x : float, y : float) {
		// Creates a vector with the linear motion
		var linearMotion = new Vector2(x, y)
		// Creates the motion influence from the created vector
		var motionInfluence = new MotionInfluence(this.body, linearMotion)
		// Adds the influence to the body
		this.body.addInfluence(motionInfluence)
	}

	def shop(status : AdultState) {
		if (status == AdultState::FEMALE_SHOP) {
		}
	}

	def moveRandomly(body : AgentBody) {
		// Retrieves the agent's body
		this.body = body as AdultBody

		// If the body don't have a target, give it a random one
		if (this.body.target == null) {
			this.body.target = new Vector2(new Random().nextInt(500), new Random().nextInt(500))
		}

		// If the body has had its target for longer than 20 seconds, give it a new one
		if (System.currentTimeMillis > this.targetAcquiredTime + 20000) {
			this.body.target = new Vector2(new Random().nextInt(500), new Random().nextInt(500))
			this.targetAcquiredTime = System.currentTimeMillis
		}

		this.body.seek
		this.body.avoidCollisionWithBodies
		this.body.avoidCollisionWithWalls
		this.body.computesVelocity
		var movement = this.body.linearVelocity.cpy.scl((System.currentTimeMillis - this.lastStepTime) / 1000f)
		move(movement.x, movement.y)
		this.lastStepTime = System.currentTimeMillis
	}
	
	def moveAlongPath(body : AgentBody, waypoints : List<Vector2>) {
		if (this.body == null) {
			this.body = body as AdultBody
		}
		
		if (this.path == null) {
			this.path = new Path(waypoints)
			this.currentNode = 0;
			this.body.target = this.path.getNode(this.currentNode)
		}
		
		if (this.body.hasReachedTarget && this.path.length > this.currentNode + 1) {
			this.currentNode++
			this.body.target = this.path.getNode(this.currentNode)
		}
		
		this.body.seek
		this.body.avoidCollisionWithBodies
		this.body.avoidCollisionWithWalls
		this.body.computesVelocity
		var movement = this.body.linearVelocity.cpy.scl((System.currentTimeMillis - this.lastStepTime) / 1000f)
		move(movement.x, movement.y)
		this.lastStepTime = System.currentTimeMillis
	}
}
