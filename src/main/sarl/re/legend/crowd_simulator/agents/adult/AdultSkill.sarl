package re.legend.crowd_simulator.agents.adult

import com.badlogic.gdx.math.Vector2
import java.util.Random
import re.legend.crowd_simulator.behaviors.AdultState
import re.legend.crowd_simulator.entities.bodies.AdultBody
import re.legend.crowd_simulator.entities.bodies.AgentBody
import re.legend.crowd_simulator.influence.MotionInfluence

skill AdultSkill implements AdultCapacity {

	// Body on which the actions will be applied
	var body : AdultBody
	
	// Last step time
	var lastStepTime : long
	
	// Time at which the agent has acquired its target, used for random moves
	var targetAcquiredTime : long
	
	def install() {
		this.lastStepTime = System.currentTimeMillis
		this.targetAcquiredTime = System.currentTimeMillis - 20000
	}

	def shop(position : Vector2) {
		throw new UnsupportedOperationException("TODO: auto-generated method stub")
	}

	def move(x : float, y : float) {
		// Creates a vector with the linear motion
		var linearMotion = new Vector2(x, y)
		// Creates the motion influence from the created vector
		var motionInfluence = new MotionInfluence(this.body, linearMotion)
		// Adds the influence to the body
		this.body.addInfluence(motionInfluence)
	}

	def shop(status : AdultState) {
		if (status == AdultState::SHOP) {
			// Write moveForward skill first
		}
	}

	def moveRandomly(body : AgentBody) {
		// Retrieves the given body as an Adult Body
		this.body = body as AdultBody

		// Just a simple random number getter
		var rand = new Random
		// Delta movement on X axis
		var dirX : int
		// Delta movement on Y axis
		var dirY : int
		// Boolean used to check if the body isn't going through a wall
		var authorizedMove = true

		do {
			authorizedMove = true
			
			// Random direction on X axis
			if (rand.nextBoolean)
				dirX = 1
			else
				dirX = -1

			// Random direction on Y axis
			if (rand.nextBoolean)
				dirY = 1
			else
				dirY = -1

			// Checks for each body's perceived objects if the move doesn't put the body in a wall
			for (object : this.body.perceivedObjects) {
				if (
					// Move on X axis wrong
					(this.body.position.x >= object.position.x &&
					this.body.position.x <= object.position.x + 16 &&
					560 - this.body.position.y + dirY >= object.position.y &&
					560 - this.body.position.y + dirY <= object.position.y + 16) ||
					// Move on Y axis wrong
					(this.body.position.x + dirX >= object.position.x &&
					this.body.position.x + dirX <= object.position.x + 16 && 
					560 - this.body.position.y >= object.position.y &&
					560 - this.body.position.y <= object.position.y + 16)
					) {
					authorizedMove = false;
				}
			}
			

		} while (!authorizedMove);

		move(dirX, dirY)
	}
	
	def moveRandom2(body : AgentBody) {
		// Retrieves the agent's body
		this.body = body as AdultBody
		
		// If the body don't have a target, give it a random one
		if (this.body.target == null) {
			this.body.target = new Vector2(new Random().nextInt(500), new Random().nextInt(500))
		}
		
		// If the body has had its target for longer than 20 seconds, give it a new one
		if (System.currentTimeMillis > this.targetAcquiredTime + 20000) {
			this.body.target = new Vector2(new Random().nextInt(500), new Random().nextInt(500))
			this.targetAcquiredTime = System.currentTimeMillis
		}
		
		this.body.seek
		this.body.avoidCollisionWithBodies
		this.body.computesVelocity
		this.body.linearVelocity.scl((System.currentTimeMillis - this.lastStepTime) / 1000f)
		move(this.body.linearVelocity.x, this.body.linearVelocity.y)
		this.lastStepTime = System.currentTimeMillis
	}
}
