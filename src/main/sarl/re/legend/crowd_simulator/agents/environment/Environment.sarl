package re.legend.crowd_simulator.agents.environment

import com.badlogic.gdx.backends.lwjgl.LwjglApplication
import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration
import com.badlogic.gdx.math.Vector2
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.Schedules
import re.legend.crowd_simulator.agents.events.GameLoopTest
import re.legend.crowd_simulator.agents.spawner.SpawnerAgent
import re.legend.crowd_simulator.graphics.SimulationApplication

/** 
 * This agent is the environment, use Observer Pattern and link with LibGDX
 * The environment will spawn "agent spirit" for people, their body, and match them
 */
agent Environment {

	uses Logging, Lifecycle, DefaultContextInteractions, MapManager, Schedules

	var application : SimulationApplication

	on Initialize {
		loggingName = "Environment"

		info("Environment initialized, creating the world...")

		// Instantiates application
		var config = occurrence.parameters.get(0) as LwjglApplicationConfiguration
		this.application = new SimulationApplication()
		new LwjglApplication(this.application, config);

		// Wait 5 secs to let the application load the graphics
		Thread::sleep(5000);

		setSkill(new DefaultMapManager)

		// Retrieves the walls from the tiled map and set them up into the map object
		setupWalls(this.application.getWalls);

		// TODO Test spawner
		spawn(SpawnerAgent, "Adult", 200, 100, new Vector2(275, 10), map)

		// TODO Implement a real game loop
		every(50)[emit(new GameLoopTest)]
	}

	on GameLoopTest {
		computePerceptions
		notifyAgents
		computeInfluences
		applyInfluences
		this.application.update(getBodies, getCurrentTime);
	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("The World was destroyed.")
	}

}
