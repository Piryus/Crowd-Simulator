package re.legend.crowd_simulator.agents.environment

import com.badlogic.gdx.backends.lwjgl.LwjglApplication
import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration
import com.badlogic.gdx.math.Vector2
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.Schedules
import re.legend.crowd_simulator.agents.events.AgentLeftMall
import re.legend.crowd_simulator.agents.events.SimulationStep
import re.legend.crowd_simulator.agents.spawner.SpawnerAgent
import re.legend.crowd_simulator.graphics.SimulationApplication

/** 
 * This agent is the environment, use Observer Pattern and link with LibGDX
 * The environment will spawn "agent spirit" for people, their body, and match them
 */
agent Environment {

	uses Logging, Lifecycle, DefaultContextInteractions, MapManager, Schedules

	var application : SimulationApplication
	
	// Indicates that we are waiting for the user to click the bomb button
	var waitingBomb : boolean

	on Initialize {
		loggingName = "Environment"

		info("Environment initialized, creating the world...")

		// Instantiates application
		var config = occurrence.parameters.get(0) as LwjglApplicationConfiguration
		this.application = new SimulationApplication()
		new LwjglApplication(this.application, config)

		this.waitingBomb = true;
		
		// Wait for the application to notify the agent that the start button has been clicked
		synchronized (this.application) {
			this.application.wait()
		}

		setSkill(new DefaultMapManager)

		// Retrieves the walls from the tiled map and set them up into the map object
		setupWalls(this.application.getWalls)

		// Gets the waypoints from the tiled map and set them up into the map object
		setupWaypoints(this.application.getWaypoints)

		// Retrieves the walls from the tiled map and set them up into the map object
		setupShops(this.application.getShops)
		
		// Retrieves the exit from the tiled map and set themp up into the map object
		setupExits(this.application.getExits)
		
		// TODO Test spawner
		spawn(SpawnerAgent, "Adult", 40, 1000, new Vector2(50, 280), map) // West
		spawn(SpawnerAgent, "Adult", 40, 1000, new Vector2(280, 500), map) // North
		spawn(SpawnerAgent, "Adult", 40, 1000, new Vector2(500, 280), map) // East
		spawn(SpawnerAgent, "Adult", 40, 1000, new Vector2(280, 50), map) //South

		// New simulation step every 50ms
		every(50)[emit(new SimulationStep)]
	}

	on SimulationStep {
		computePerceptions
		notifyAgents
		computeInfluences
		applyInfluences
		this.application.update(getBodies, getCurrentTime)
		if (this.application.bombTriggered && this.waitingBomb) {
			this.waitingBomb = false
			spawnBomb
		}
	}
	
	on AgentLeftMall {
		var agentId = occurrence.agentId
		removeBody(agentId)
	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("The World was destroyed.")
	}
	
}
