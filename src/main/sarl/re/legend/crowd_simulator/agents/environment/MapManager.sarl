package re.legend.crowd_simulator.agents.environment

import io.sarl.core.DefaultContextInteractions
import java.util.ArrayList
import java.util.List
import java.util.UUID
import re.legend.crowd_simulator.agents.events.Perception
import re.legend.crowd_simulator.entities.SimulationEntity
import re.legend.crowd_simulator.entities.bodies.AdultBody
import re.legend.crowd_simulator.entities.bodies.AgentBody
import re.legend.crowd_simulator.entities.bodies.DogBody
import re.legend.crowd_simulator.entities.bodies.KidBody
import re.legend.crowd_simulator.entities.gameobjects.Wall
import re.legend.crowd_simulator.frustum.AdultFrustum
import re.legend.crowd_simulator.frustum.EntityFrustum
import re.legend.crowd_simulator.influence.Influence
import re.legend.crowd_simulator.influence.MotionInfluence
import re.legend.crowd_simulator.map.Map

/**
 * Capacity to manage the map
 */
capacity MapManager {
	/**
	 * Create an adult body
	 */
	 def createAdult() : AdultBody
	 
	 /**
	  * Create a kid body
	  */
	 def createKid() : KidBody
	 
	 /**
	  * Create a dog body
	  */
	 def createDog : DogBody
	 
	 /**
	  * Return a list containing the bodies on the map
	  */
	 def getBodies() : List<AgentBody>
	 
	 /**
	  * Set up the walls in the map object
	  */
	 def setupWalls(walls : List<Wall>)
	 
	 /**
	  * Compute the perceptions of each body on the map
	  */
	 def computePerceptions	 
	 
	 /**
	  * Returns the AgentBody with the given ID
	  */
	 def getBodyWithId(id : UUID) : AgentBody

	/**
	 * Notify the agents contained in the space 
	 */
	def notifyAgents
	
	/**
	 * Compute the bodies' influences and solve conflicts
	 */
	def computeInfluences
	
	/**
	 * Apply the computed influences
	 */
	def applyInfluences
	
	/**
	 * Return the current time in seconds since the beginning of the simulation
	 */
	def getCurrentTime : long
}

skill DefaultMapManager implements MapManager {
	uses DefaultContextInteractions
	
	// The map of the simulation
	var map : Map
	
	// Computed influences to apply
	var influencesToApply : List<Influence>
	
	// Timer
	var startTimer : long;
	var worldTimer : long;
	
	def install {
		this.map = new Map()
		this.startTimer = System.currentTimeMillis()
	}
	
	def createAdult : AdultBody {
		this.map.createBody(typeof(AdultBody), null);
	}

	def createKid : KidBody {
		this.map.createBody(typeof(KidBody), null);
	}

	def createDog : DogBody {
		this.map.createBody(typeof(DogBody), null);
	}

	def getBodies() : List<AgentBody> {
		new ArrayList<AgentBody>(this.map.getBodies)
	}
	
	def setupWalls(walls : List<Wall>) {
		map.setWalls(walls);
	}
	
	def computePerceptions {
		
		var frustum : EntityFrustum
		var bodies = new ArrayList<AgentBody>
		var objects = new ArrayList<SimulationEntity>
		
		// 
		for (body : map.bodies) {
			frustum = body.getFrustum
			
			if (frustum === null)
				frustum = new AdultFrustum(10)
				
			var frustumSideLength = frustum.getSideLength * Map.CELL_SIZE
			
			// Computes the perceived bodies
			for (b : map.bodies) {
				if (b.getPosition.x >= (body.getPosition.x - frustumSideLength) &&
					b.getPosition.x <= (body.getPosition.x + frustumSideLength) &&
					b.getPosition.y >= (560 - body.getPosition.y - frustumSideLength) &&
					b.getPosition.y <= (560 - body.getPosition.y + frustumSideLength) &&
					b != body) {
						bodies.add(b);
					}
			}
			
			// Computes the perceived walls
			for (w : map.getWalls) {
				if (w.getPosition.x >= (body.getPosition.x - frustumSideLength) &&
					w.getPosition.x <= (body.getPosition.x + frustumSideLength) &&
					w.getPosition.y >= (560 - body.getPosition.y - frustumSideLength) &&
					w.getPosition.y <= (560 - body.getPosition.y + frustumSideLength)) {
					objects.add(w);
				}
			}
			
			// Adds the computed perceptions to the body
			body.setPerceptions(bodies, objects)
		}
	}
	
	def getBodyWithId(id : UUID) : AgentBody {
		for (body : this.map.bodies) {
			if (body.getUuid.equals(id)) {
				return body
			}
		}
	}
	
	def notifyAgents {
		// Manage time first, we could create a structure here or something like this holding the time infos
		// val timePercept = new TimePercept(this.environment.timeManager.currentTime, this.environment.timeManager.lastStepDuration)
		// Create and send the perception event to every bodies
		for (body : this.map.bodies) {
			// Create the perception
			var perception = new Perception(body, getCurrentTime

			/* body.perceivedObjects, new Percept(body), timePercept
			 */
			)
			perception.source = defaultSpace.getAddress(ID)
			// Emit the perception
			emit(perception)[it.UUID == body.uuid]
		}
	}
	
	def computeInfluences {
		// List of definitive influences that will be applied
		var influences = new ArrayList<Influence>
		// Loop through the list of bodies, computing each body's influences
		for (body : this.map.bodies) {
			// Compute motion influences
			for (motionInfluence : body.motionInfluences) {
				// TODO Solve conflicts
				// Adds the influence to the list of definitive influences that will be applied
				influences.add(motionInfluence);
			}
			// TODO Compute other influences of the body as well
			// Clear the body's influences in order to prepare next step
			body.clearInfluences();
		}
		// Sets the influences to apply
		this.influencesToApply = new ArrayList<Influence>(influences)
	}
	
	def applyInfluences {
		// Apply each influence
		for (influence : this.influencesToApply) {
			// Motion influence
			if (influence instanceof MotionInfluence) {
				// Move the agent's body
				influence.agentBody.moveOf(influence.linearMotion)
			}
		}
	}
	
	def getCurrentTime : long {
		return this.worldTimer = (System.currentTimeMillis() - this.startTimer) / 1000; 	// Time in seconds	
	}
	
}