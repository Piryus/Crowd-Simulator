package re.legend.crowd_simulator.agents.environment

import com.badlogic.gdx.math.Vector2
import com.google.common.graph.MutableGraph
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Lifecycle
import java.util.ArrayList
import java.util.List
import java.util.Random
import java.util.UUID
import re.legend.crowd_simulator.agents.events.Alarm
import re.legend.crowd_simulator.agents.events.Perception
import re.legend.crowd_simulator.entities.SimulationEntity
import re.legend.crowd_simulator.entities.bodies.AdultBody
import re.legend.crowd_simulator.entities.bodies.AgentBody
import re.legend.crowd_simulator.entities.bodies.DogBody
import re.legend.crowd_simulator.entities.bodies.KidBody
import re.legend.crowd_simulator.entities.gameobjects.Bomb
import re.legend.crowd_simulator.entities.gameobjects.Shop
import re.legend.crowd_simulator.entities.gameobjects.Wall
import re.legend.crowd_simulator.frustum.AdultFrustum
import re.legend.crowd_simulator.frustum.EntityFrustum
import re.legend.crowd_simulator.influence.Influence
import re.legend.crowd_simulator.influence.MotionInfluence
import re.legend.crowd_simulator.map.Map
import re.legend.crowd_simulator.pathfinding.AStarNode

/** 
 * Capacity to manage the map
 */
capacity MapManager {

		/** 
		 * Create an adult body
		 */
	def createAdult(spawnPosX : float, spawnPosY : float) : AdultBody

	/** 
	 * Create a kid body
	 */
	def createKid(spawnPosX : float, spawnPosY : float) : KidBody

	/** 
	 * Create a dog body
	 */
	def createDog(spawnPosX : float, spawnPosY : float) : DogBody

	/** 
	 * Return a list containing the bodies on the map
	 */
	def getBodies() : List<AgentBody>

	/** 
	 * Set up the walls in the map object
	 */
	def setupWalls(walls : List<Wall>)

	/** 
	 * Set up female shops in the map object
	 */
	def setupShops(shops : List<Shop>)

	/** 
	 * Compute the perceptions of each body on the map
	 */
	def computePerceptions

	/** 
	 * Returns the AgentBody with the given ID
	 */
	def getBodyWithId(id : UUID) : AgentBody

	/** 
	 * Notify the agents contained in the space 
	 */
	def notifyAgents

	/** 
	 * Compute the bodies' influences and solve conflicts
	 */
	def computeInfluences

	/** 
	 * Apply the computed influences
	 */
	def applyInfluences

	/** 
	 * Return the current time in seconds since the beginning of the simulation
	 */
	def getCurrentTime : float

	/** 
	 * Get the map
	 */
	def getMap : Map

	/** 
	 * Set up the waypoints for pathfinding
	 */
	def setupWaypoints(waypoints : MutableGraph<AStarNode>)
	
	/**
	 * Spawns a bomb agent
	 */
	def spawnBomb()
	
	/**
	 * Set up exits in the map object
	 */
	def setupExits(exits : List<Vector2>)
	
	/**
	 * Removes the body with the given ID from the map
	 */
	def removeBody(id: UUID)
}

skill DefaultMapManager implements MapManager {
	uses DefaultContextInteractions, Lifecycle

	// The map of the simulation
	var map : Map

	// Computed influences to apply
	var influencesToApply : List<Influence>

	// Timer
	var startTimer : long;

	def install {
		this.map = new Map()
		this.startTimer = System.currentTimeMillis()
	}

	def createAdult(spawnPosX : float, spawnPosY : float) : AdultBody {
		synchronized (this.map.bodies) {
			this.map.createBody(typeof(AdultBody), null, spawnPosX, spawnPosY);
		}
	}

	def createKid(spawnPosX : float, spawnPosY : float) : KidBody {
		this.map.createBody(typeof(KidBody), null, spawnPosX, spawnPosY);
	}

	def createDog(spawnPosX : float, spawnPosY : float) : DogBody {
		this.map.createBody(typeof(DogBody), null, spawnPosX, spawnPosY);
	}

	def getBodies() : List<AgentBody> {
		synchronized (this.map.bodies) {
			return this.map.getBodies.toList;

		}
	}

	def setupWalls(walls : List<Wall>) {
		this.map.setWalls(walls);
	}

	def computePerceptions {
		synchronized (this.map.bodies) {
			var frustum : EntityFrustum

			var bodies = new ArrayList<AgentBody>
			var objects = new ArrayList<SimulationEntity>

			for (body : map.bodies) {
				// Clears the perception lists
				bodies = new ArrayList<AgentBody>
				objects = new ArrayList<SimulationEntity>

				frustum = body.getFrustum

				if (frustum === null)
					frustum = new AdultFrustum(10)

				var frustumSideLength = frustum.getSideLength * Map.CELL_SIZE

				// Computes the perceived bodies
				for (b : map.bodies) {
					if (b.getPosition.x >= (body.getPosition.x - frustumSideLength) &&
						b.getPosition.x <= (body.getPosition.x + frustumSideLength) &&
						b.getPosition.y >= (body.getPosition.y - frustumSideLength) &&
						b.getPosition.y <= (body.getPosition.y + frustumSideLength) && b.uuid != body.uuid) {
						bodies.add(b);
					}
				}

				// Computes the perceived walls
				for (w : map.getWalls) {
					if (w.getPosition.x >= (body.getPosition.x - frustumSideLength) &&
						w.getPosition.x <= (body.getPosition.x + frustumSideLength) &&
						w.getPosition.y >= (body.getPosition.y - frustumSideLength) &&
						w.getPosition.y <= (body.getPosition.y + frustumSideLength)) {
						objects.add(w);
					}
				}

				// Adds the computed perceptions to the body
				body.setPerceptions(bodies, objects)
			}
		}
	}

	def getBodyWithId(id : UUID) : AgentBody {
		synchronized (this.map.bodies) {
			for (body : this.map.bodies) {
				if (body.getUuid.equals(id)) {
					return body
				}
			}
		}
	}

	def notifyAgents {
		synchronized (this.map.bodies) {
			// Create and send the perception event to every bodies
			for (body : this.map.bodies) {
				// Create the perception
				var perception = new Perception(body, getCurrentTime, this.map.waypoints, this.map.shops)
				perception.source = defaultSpace.getAddress(ID)
				// Emit the perception
				synchronized (body) {
					emit(perception)[it.UUID == body.uuid]
				}
			}
		}
	}

	def computeInfluences {
		synchronized (this.map.bodies) {
			// List of definitive influences that will be applied
			var influences = new ArrayList<Influence>
			// Loop through the list of bodies, computing each body's influences
			for (body : this.map.bodies) {
				// Compute motion influences
				for (motionInfluence : body.motionInfluences) {
					// TODO Solve conflicts
					// Adds the influence to the list of definitive influences that will be applied
					influences.add(motionInfluence);
				}
				// TODO Compute other influences of the body as well
				// Clear the body's influences in order to prepare next step
				body.clearInfluences();
			}
			// Sets the influences to apply
			this.influencesToApply = new ArrayList<Influence>(influences)
		}
	}

	def applyInfluences {
		// Apply each influence
		for (influence : this.influencesToApply) {
			// Motion influence
			if (influence instanceof MotionInfluence) {
				// Move the agent's body
				influence.agentBody.moveOf(influence.linearMotion)
			}
		}
	}

	def getCurrentTime : float {
		return (System.currentTimeMillis - this.startTimer) / 1000f; 	// Time in seconds
	}

	def getMap : Map {
		return this.map;
	}

	def setupWaypoints(waypoints : MutableGraph<AStarNode>) {
		this.map.setWaypoints(waypoints)
	}

	
	def setupShops(shops : List<Shop>) {
		this.map.setShops(shops)
	}
	
	def spawnBomb() {
		var rand = new Random
		var bombBody = new Bomb(rand.nextInt(Map.MAP_SIZE), rand.nextInt(Map.MAP_SIZE))
		this.map.setBomb(bombBody)
		synchronized (this.map.bodies) {
			for (body : this.map.bodies) {
				synchronized (body) {
					emit(new Alarm(this.map.exits))[it.UUID == body.uuid]
				}
			}
		}	
	}
	
	def setupExits(exits : List<Vector2>) {
		this.map.setExits(exits)
	}
	
	def removeBody(id : UUID) {
		this.map.removeBody(id)
	}
	
}
